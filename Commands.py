import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from Google_sheets import add_to_knowledge_base
from Config import GROUP_ID, GROUP_INVITE_LINK
from Keyboards import get_main_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs/bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AddQAStates(StatesGroup):
    waiting_for_data = State()

async def is_user_in_group(bot: Bot, user_id: int, group_id: str, check_admin: bool = False) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.
    –ï—Å–ª–∏ check_admin=True, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –≥—Ä—É–ø–ø—ã.
    """
    try:
        member = await bot.get_chat_member(chat_id=group_id, user_id=user_id)
        if check_admin:
            return member.status in ["administrator", "creator"]
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ –≥—Ä—É–ø–ø–µ {group_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

def create_subscription_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É.
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É", url=GROUP_INVITE_LINK)]
    ])
    return keyboard

def create_welcome_keyboard(bot_username: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ MiniApp –∏ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.
    """
    # –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ MiniApp
    mini_app_url = f"https://t.me/{bot_username}?startapp=support"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="MiniApp", url=mini_app_url),
            InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")
        ]
    ])
    return keyboard

def escape_html(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ HTML-—Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ.
    """
    return text.replace("<", "&lt;").replace(">", "&gt;").replace("&", "&amp;")

def register_commands(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.
    """
    logger.info("–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥...")

    async def cmd_start(message: types.Message, bot: Bot):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –≥—Ä—É–ø–ø–µ, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ
        user_in_group = await is_user_in_group(bot, message.from_user.id, GROUP_ID)
        if not user_in_group:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ {GROUP_ID}")
            keyboard = create_subscription_keyboard()
            await message.reply(
                "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à—É –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É.",
                reply_markup=keyboard
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ MiniApp
        bot_username = (await bot.get_me()).username
        keyboard = create_welcome_keyboard(bot_username)
        main_keyboard = get_main_keyboard()
        await message.reply(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ó–µ–ª—ë–Ω—ã–π, —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: üòä",
            reply_markup=keyboard
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.reply(
            "–ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, —è –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üòä",
            reply_markup=main_keyboard
        )

    async def cmd_add_qa(message: types.Message, bot: Bot, state: FSMContext):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /add_qa –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
        –§–æ—Ä–º–∞—Ç: –í–æ–ø—Ä–æ—Å: <–≤–æ–ø—Ä–æ—Å> | –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: <—Å–ª–æ–≤–∞> | –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: <–æ—Ç–≤–µ—Ç>
        –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã.
        """
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /add_qa –æ—Ç {message.from_user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ
        user_in_group = await is_user_in_group(bot, message.from_user.id, GROUP_ID)
        if not user_in_group:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ {GROUP_ID}")
            keyboard = create_subscription_keyboard()
            await message.reply(
                "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à—É –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É.",
                reply_markup=keyboard
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
        is_admin = await is_user_in_group(bot, message.from_user.id, GROUP_ID, check_admin=True)
        if not is_admin:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {GROUP_ID}")
            await message.reply(
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã."
            )
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        await state.set_state(AddQAStates.waiting_for_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        template = (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "<b>–í–æ–ø—Ä–æ—Å:</b> [–≤–æ–ø—Ä–æ—Å]\n"
            "<b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> [—Å–ª–æ–≤–∞] (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
            "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> [–æ—Ç–≤–µ—Ç]\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "–í–æ–ø—Ä–æ—Å: –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Wi-Fi?\n"
            "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: Wi-Fi, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n"
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: 1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞. 2. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å. 3. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å."
        )
        await message.reply(template, parse_mode="HTML")

    async def handle_add_qa_response(message: types.Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
        """
        text = message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π: {text}")

        try:
            # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            parts = text.split("\n")
            question = None
            keywords = ""
            answer = None

            for part in parts:
                part = part.strip()
                if part.startswith("–í–æ–ø—Ä–æ—Å:"):
                    question = part.replace("–í–æ–ø—Ä–æ—Å:", "").strip()
                elif part.startswith("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:"):
                    keywords = part.replace("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:", "").strip()
                elif part.startswith("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"):
                    answer = part.replace("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", "").strip()

            if not question or not answer:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            success = add_to_knowledge_base(question, keywords, answer)
            if success:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—Å—Ç–∞
                response = (
                    "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π! üòä\n\n"
                    f"<b>–í–æ–ø—Ä–æ—Å:</b> {escape_html(question)}\n\n"
                    f"<b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b> {escape_html(keywords) if keywords else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n\n"
                    f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {escape_html(answer)}"
                )
                await message.reply(response, parse_mode="HTML")
            else:
                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /add_qa: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await state.clear()

    async def cmd_inf1(message: types.Message, bot: Bot):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /inf1.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π.
        """
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /inf1 –æ—Ç {message.from_user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ
        user_in_group = await is_user_in_group(bot, message.from_user.id, GROUP_ID)
        if not user_in_group:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ {GROUP_ID}")
            keyboard = create_subscription_keyboard()
            await message.reply(
                "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à—É –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É.",
                reply_markup=keyboard
            )
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://example.com")]
        ])
        await message.reply(
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /inf1.",
            reply_markup=keyboard
        )

    async def cmd_inf2(message: types.Message, bot: Bot):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /inf2.
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π.
        """
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /inf2 –æ—Ç {message.from_user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ
        user_in_group = await is_user_in_group(bot, message.from_user.id, GROUP_ID)
        if not user_in_group:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ {GROUP_ID}")
            keyboard = create_subscription_keyboard()
            await message.reply(
                "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à—É –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É.",
                reply_markup=keyboard
            )
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url="https://example.com")]
        ])
        await message.reply(
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /inf2.",
            reply_markup=keyboard
        )

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_add_qa, Command("add_qa"))
    dp.message.register(handle_add_qa_response, AddQAStates.waiting_for_data)
    dp.message.register(cmd_inf1, Command("inf1"))
    dp.message.register(cmd_inf2, Command("inf2"))

    logger.info("–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")