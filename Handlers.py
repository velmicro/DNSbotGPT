import logging
import asyncio
import re
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from Utils import process_message, split_message, is_russian_text
from Config import GROUP_ID, GROUP_INVITE_LINK
from Keyboards import get_reaction_keyboard, get_main_keyboard, get_instruction_keyboard
from Prompts import load_prompts

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("logs/bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–π
feedback_logger = logging.getLogger("feedback")
feedback_handler = logging.FileHandler("logs/feedback.log", encoding='utf-8')
feedback_handler.setFormatter(logging.Formatter("%(asctime)s - %(levelname)s - %(message)s"))
feedback_logger.addHandler(feedback_handler)
feedback_logger.setLevel(logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–æ–≤
dialog_context = {}  # {user_id: [{"role": "user", "content": "–≤–æ–ø—Ä–æ—Å"}, {"role": "assistant", "content": "–æ—Ç–≤–µ—Ç"}]}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
prompts_data = load_prompts()
simple_dialogs = prompts_data["dialogs"]
system_settings = prompts_data["settings"]

async def is_user_in_group(bot: Bot, user_id: int, group_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.
    """
    try:
        member = await bot.get_chat_member(chat_id=group_id, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–ª–µ–Ω—Å—Ç–≤–∞ –≤ –≥—Ä—É–ø–ø–µ {group_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

def create_subscription_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É.
    """
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≥—Ä—É–ø–ø—É", url=GROUP_INVITE_LINK)]
    ])
    return keyboard

def register_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞.
    """
    logger.info("–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")

    @dp.message()
    async def handle_message(message: types.Message, bot: Bot):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤—Å—é –ª–æ–≥–∏–∫—É –≤ process_message.
        """
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: {message.text}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –ª–∏—á–Ω—ã–º
        is_private_chat = message.chat.type == "private"

        # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ "–ó–µ–ª—ë–Ω—ã–π"
        if not is_private_chat:
            if not re.search(r"–∑–µ–ª—ë–Ω—ã–π", message.text.lower()):
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ '–ó–µ–ª—ë–Ω—ã–π': {message.text}")
                return

            user_in_group = await is_user_in_group(bot, message.from_user.id, GROUP_ID)
            if not user_in_group:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ {GROUP_ID}")
                keyboard = create_subscription_keyboard()
                await message.reply(
                    "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à—É –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É.",
                    reply_markup=keyboard
                )
                return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ó–µ–ª—ë–Ω—ã–π –ø–∏—à–µ—Ç..."
        typing_message = await message.reply("–ó–µ–ª—ë–Ω—ã–π –ø–∏—à–µ—Ç‚Ä¶")
        await asyncio.sleep(1)

        query = message.text.strip().lower()
        if not query:
            await typing_message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ–∏—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑ —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if not is_russian_text(query):
            await typing_message.edit_text(
                "–ó–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫! üòî"
            )
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if query == "–Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥":
            user_id = message.from_user.id
            if user_id in dialog_context:
                del dialog_context[user_id]
            main_keyboard = get_main_keyboard()
            await typing_message.delete()
            await message.reply("–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω. –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã! üòä",
                               reply_markup=main_keyboard)
            return

        elif query == "–æ –±–æ—Ç–µ":
            main_keyboard = get_main_keyboard()
            await typing_message.delete()
            await message.reply(
                f"–Ø {system_settings['name']}, {system_settings['role']}! "
                f"–ú–æ—è —Ü–µ–ª—å: {system_settings['goal']}. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòÑ",
                reply_markup=main_keyboard
            )
            return

        elif query == "–ø–æ–º–æ—â—å":
            instruction_keyboard = get_instruction_keyboard()
            main_keyboard = get_main_keyboard()
            await typing_message.edit_text(
                "–ß—Ç–æ–±—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ, –æ—Ç–∫—Ä–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.",
                reply_markup=instruction_keyboard
            )
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        user_id = message.from_user.id
        if user_id not in dialog_context:
            dialog_context[user_id] = []
        dialog_context[user_id].append({"role": "user", "content": query})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ –¥–∏–∞–ª–æ–≥–∏ (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        for key, response in simple_dialogs.items():
            if key in query:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –∫–ª—é—á –≤ –∑–∞–ø—Ä–æ—Å–µ
                reaction_keyboard = get_reaction_keyboard(message.message_id)
                await typing_message.edit_text(response, reply_markup=reaction_keyboard)
                dialog_context[user_id].append({"role": "assistant", "content": response})
                return

        # –ü–µ—Ä–µ–¥–∞—ë–º –∑–∞–ø—Ä–æ—Å –≤ process_message
        try:
            response = await process_message(query)
            reaction_keyboard = get_reaction_keyboard(message.message_id)
            message_parts = split_message(response)
            for i, part in enumerate(message_parts):
                if i == 0:
                    await typing_message.edit_text(part, reply_markup=reaction_keyboard)
                else:
                    await message.reply(part)
            dialog_context[user_id].append({"role": "assistant", "content": response})
            if len(dialog_context[user_id]) > 10:
                dialog_context[user_id] = dialog_context[user_id][-10:]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await typing_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å. üòî")

    @dp.callback_query(lambda c: c.data.startswith("reaction_"))
    async def handle_reaction(callback: types.CallbackQuery):
        reaction, message_id = callback.data.split("_")[1], callback.data.split("_")[2]
        user_id = callback.from_user.id
        feedback_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ü–µ–Ω–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {reaction}")
        await callback.message.edit_text(f"{callback.message.text}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üòä")
        await callback.answer()

    @dp.callback_query()
    async def handle_callback(callback: types.CallbackQuery):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç {callback.from_user.id}: {callback.data}")
        if callback.data == "instruction":
            main_keyboard = get_main_keyboard()
            await callback.message.edit_text(
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n"
                "1. –í –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –∑–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n"
                "2. –í –≥—Ä—É–ø–ø–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–æ '–ó–µ–ª—ë–Ω—ã–π'.\n"
                "3. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à—É –∑–∞–∫—Ä—ã—Ç—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.",
                reply_markup=None
            )
        await callback.answer()

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")